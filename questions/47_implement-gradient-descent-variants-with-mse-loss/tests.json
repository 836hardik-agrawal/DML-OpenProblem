[
  {
    "test": "import numpy as np\n\nX = np.array([[1, 1], [2, 1], [3, 1], [4, 1]])\ny = np.array([2, 3, 4, 5])\nweights = np.zeros(X.shape[1])\nlearning_rate = 0.01\nn_iterations = 100\n\n# Test Batch Gradient Descent\noutput = gradient_descent(X, y, weights, learning_rate, n_iterations, method='batch')\nprint(output)",
    "expected_output": "[1.14905239 0.56176776]"
  },
  {
    "test": "import numpy as np\n\nX = np.array([[1, 1], [2, 1], [3, 1], [4, 1]])\ny = np.array([2, 3, 4, 5])\nweights = np.zeros(X.shape[1])\nlearning_rate = 0.01\nn_iterations = 100\n\n# Test Stochastic Gradient Descent\noutput = gradient_descent(X, y, weights, learning_rate, n_iterations, method='stochastic')\nprint(output)",
    "expected_output": "[1.0507814  0.83659454]"
  },
  {
    "test": "import numpy as np\n\nX = np.array([[1, 1], [2, 1], [3, 1], [4, 1]])\ny = np.array([2, 3, 4, 5])\nweights = np.zeros(X.shape[1])\nlearning_rate = 0.01\nn_iterations = 100\nbatch_size = 2\n\n# Test Mini-Batch Gradient Descent\noutput = gradient_descent(X, y, weights, learning_rate, n_iterations, batch_size, method='mini_batch')\nprint(output)",
    "expected_output": "[1.10334065 0.68329431]"
  }
]
